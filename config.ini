# ----------------------------
# Configuration file of the REI3 Tickets MCP Server.
# ----------------------------

[general]
host       = 127.0.0.1
port       = 54321

[mcp-server]
# ----------------------------
# Transport configuration
# ----------------------------
#
# - stdio -> For when the MCP server and the *singular* calling MCP client are operated on the same machine.
# - http  -> For when the MCP server should handle multiple concurrent or remote clients.
#
# Further information:
# 'stdio': https://modelcontextprotocol.io/specification/2025-06-18/basic/transports#stdio
# 'http' : https://modelcontextprotocol.io/specification/2025-06-18/basic/transports#streamable-http
#
transport  = http

[web-server]
# ----------------------------
# Enable setting
# ----------------------------
#
# Can only be used with http transport!
#
# Enables or disables the django based management web-application.
# This feature was primarily implemented for docker instances of the REI3 Tickets MCP server.
#
# Exposed endpoints:
#    - /mcp/   <- The REI3 Tickets MCP server endpoint. (Note: '/mcp' won't work, ensure you use '/mcp/'!)
#    - /       <- The django admin application.
#
# Default superuser account settings:
#    - username: admin
#    - password: admin
# -> Ensure to change these after the first login!
#
enable     = false

# ----------------------------
# Allowed Hosts
# ----------------------------
#
# This setting defines which host(s) / domain name(s) or IP address(es) the web-server will accept requests from.
# It is used to prevent HTTP Host header attacks.
#
# In production, you should specify the actual domains or IP addresses that clients will use to access the web-server.
# (e.g.: allowed_hosts = example.com,www.example.com,192.168.10.100)
#
allowed_hosts = localhost,127.0.0.1

# ----------------------------
# Secure certificate file
# ----------------------------
#
# The certificate file to use for ssl.
# (e.g.: .\ssl\ssl.crt)
#
# If you do not have an SSL certificate and key file leave this value empty.
#
ssl_cert_file =

# ----------------------------
# Secure key file
# ----------------------------
#
# The key file to use for ssl.
# (e.g.: .\ssl\ssl.key)
#
# If you do not have an SSL certificate and key file leave this value empty.
#
ssl_key_file =

# ----------------------------
# Secure SSL redirect
# ----------------------------
#
# If true redirects all non HTTPS requests to HTTPS.
# Further information: https://docs.djangoproject.com/en/5.2/ref/settings/#secure-ssl-redirect
#
secure_ssl_redirect = false

# ----------------------------
# Secure HSTS seconds
# ----------------------------
#
# If set to a non-zero integer value, the HTTP Strict Transport Security header will be set on all responses that do
# not already have it.
#
# Setting this value wrong can cause the web-server to break. If so, read up on the further information site.
# Further information: https://docs.djangoproject.com/en/5.2/ref/settings/#secure-hsts-seconds
#
secure_hsts_seconds = 0

# ----------------------------
# Secure HSTS include subdomains
# ----------------------------
#
# If true, adds the includeSubDomains directive to the HTTP Strict Transport Security header.
# Has no effect, unless secure_hsts_seconds is set to a non-zero value.
#
# Further information: https://docs.djangoproject.com/en/5.2/ref/settings/#secure-hsts-include-subdomains
#
secure_hsts_include_subdomains = true

# ----------------------------
# Secure HSTS preload
# ----------------------------
#
# If true, adds the preload directive to the HTTP Strict Transport Security header.
# Has no effect, unless secure_hsts_seconds is set to a non-zero value.
#
# Further information: https://docs.djangoproject.com/en/5.2/ref/settings/#secure-hsts-preload
#
secure_hsts_preload = true

# ----------------------------
# Session Cookie secure
# ----------------------------
#
# If true, the session cookie will be marked as "secure", which means browsers may ensure that the cookie is only sent
# under an HTTPS connection.
#
# Should be enabled in production environments, as attackers could otherwise capture the unencrypted session cookie
# with a packet sniffer and use the cookie to hijack a user's session.
#
# Further information: https://docs.djangoproject.com/en/5.2/ref/settings/#session-cookie-secure
#
session_cookie_secure = true

# ----------------------------
# CSRF Cookie secure
# ----------------------------
#
# If true, the Cross-Site Request Forgery (CSRF) cookie will be marked as "secure", which means browsers may ensure
# that the cookie is only sent under an HTTPS connection.
#
# Should be set to 'true' in production environments, as attackers could otherwise capture the unencrypted CSRF cookie
# with a packet sniffer.
#
# Further information: https://docs.djangoproject.com/en/5.2/ref/settings/#csrf-cookie-secure
#
csrf_cookie_secure = true

[rei3-tickets-api]
username   = admin
password   = admin
email      = tickets-mcp-server@mcp.local
profile    = 1
key_format = {key:06d}
base_url   = http://localhost:21918